name: point_pillar_mymodel
root_dir: 'D:/BaiduNetdiskDownload/v2xset/train'
validate_dir: 'D:/BaiduNetdiskDownload/v2xset/validate'

wild_setting: # setting related to noise
  async: False
  async_mode: 'sim'
  async_overhead: 100
  backbone_delay: 10
  data_size: 1.06
  loc_err: False
  ryp_std: 0.2
  xyz_std: 0.2
  seed: 25
  transmission_speed: 27

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: 30
  eval_freq: 1
  save_freq: 1
  max_cav: &max_cav 5

fusion:
  core_method: 'IntermediateFusionDataset' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:
    cur_ego_pose_flag: False

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -38.4, -3, 140.8, 38.4, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 4
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.27
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# TODO: model related
model:
  core_method: point_pillar_mymodel
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    max_cav: *max_cav
    compression: 0 # compression rate
    backbone_fix: false
    head_dim: 256

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [ 64 ]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone:
      layer_nums: &layer_nums [ 3, 5, 8 ]
      layer_strides: [ 2, 2, 2 ]
      num_filters: &num_filters [ 64, 128, 256 ]
      upsample_strides: [ 1, 2, 4 ]
      num_upsample_filter: [ 128, 128, 128 ]
      resnet: true
    shrink_header:
      kernal_size: [ 3 ]
      stride: [ 2 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3

    myfusion:
      # number of fusion blocks per encoder layer
      num_blocks: 1
      # number of encoder layers
      depth: 3
      multi_scale: True
      fully: False
      voxel_size: *voxel_size
      downsample_rate: 4
      in_channels: 256
      layer_nums: *layer_nums
      num_filters: *num_filters
      use_roi_mask: true
      use_RTE: &use_RTE true
      RTE_ratio: &RTE_ratio 2 # 2 means the dt has 100ms interval while 1 means 50 ms interval
      # agent-wise attention
      cav_att_config: &cav_att_config
        dim: [ 64, 128, 256 ]
        use_hetero: true
        use_RTE: *use_RTE
        RTE_ratio: *RTE_ratio
        heads: 8
        dim_head: 32
        dropout: 0.3
      # feedforward condition
      feed_forward: &feed_forward
        mlp_dim: 256
        dropout: 0.3
      sttf: &sttf
        voxel_size: *voxel_size
        downsample_rate: 4
      myfusion:
        communication:
          round: 1
          threshold: 0.01
          gaussian_smooth:
            k_size: 5
            c_sigma: 1.0

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [15, 50]